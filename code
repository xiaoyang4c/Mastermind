#include<bits/stdc++.h>
using namespace std;
 
typedef long long ll;

#define fi first
#define se second
#define pii pair<int,int>
#define pll pair<long long,long long>
#define pb push_back
#define debug(x) cerr<<#x<<"="<<x<<endl
#define pq priority_queue
#define inf 1ll<<60
#define rep(i,a,b) for (ll i=a;i<(b);i++)
#define MP make_pair
#define SZ(x) (int(x.size()))
#define mod 1000000007
#define ALL(x) x.begin(),x.end()
#define endl "\n"
void inc(ll &a,ll b) {a=(a+b)%mod;}
void dec(ll &a,ll b) {a=(a-b+mod)%mod;}
int lowbit(ll x) {return x&(-x);}

set<string>total_codes;//6 colours , 4 pegs
double total_guess=0,average_guess=0;
int mx=0;

//Knuth codes are codes that may still be secret code, given guesses and feedback so far
//Possible codes are codes that have not been guessed yet
//total codes are total amount of possible codes
//guess codes are the current possible codes with the lowest minimax value 

set<string>GetTotalCodes(){
	set<string>s;
	rep(i,1,7){
		rep(j,1,7){
			rep(k,1,7){
				rep(l,1,7){
					int x = l+k*10+j*100+i*1000;
					s.insert(to_string(x));
				}
			}
		}
	}
	return s;
}

string GetGuessCodeFromList(set<string> &knuth_codes, set<string> &guess_codes){
	for(auto code:guess_codes){
		if(knuth_codes.find(code)!=knuth_codes.end())return code;
	}
	return *guess_codes.begin();
}

//why th this function so buggy bruh
pair<int,int> GuessCode(string mastermind_code,string code){//{correct places, wrong places}
	int cp=0,wp=0;
	int matched_cp[4],matched_wp[4];
	memset(matched_cp,0,sizeof matched_cp);
	memset(matched_wp,0,sizeof matched_wp);
	//check for cp
	rep(i,0,4){
		if(mastermind_code[i]==code[i])matched_cp[i]=1,cp++;
	}
	//check for wp
	rep(i,0,4){
		if(!matched_cp[i]){
			rep(j,0,4){
				//debug(mastermind_code[i]);
				//debug(code[j]);
				if(!matched_wp[j] and !matched_cp[j] and mastermind_code[i]==code[j]){
					matched_wp[j]=1;
					wp++;
					break;//you dont need to match with any more of the same digits alr
				}
			}
		}
	}
	return MP(cp,wp);
}

void PruneList(string last_guess, pair<int,int>feedback,set<string> &knuth_codes){
	vector<string>to_be_deleted;
	for(auto code:knuth_codes){
		pair<int,int>retrieved_feedback=GuessCode(code,last_guess);
		if(retrieved_feedback!=feedback){
			to_be_deleted.pb(code);
		}
	}
	for(auto code:to_be_deleted)knuth_codes.erase(code);
}

set<string>MiniMax(set<string> &knuth_codes,set<string> &possible_codes){
	set<string>guess_codes;

	map<string,int>score;
	for(auto code:possible_codes){
		map<pair<int,int>,int>times_found;//note that this map must be declared here
		for(auto code_to_crack:knuth_codes){
			pair<int,int>feedback = GuessCode(code,code_to_crack);
			times_found[feedback]++;
		}
		int maximum=0;
		for(auto x:times_found)maximum=max(x.se,maximum);
		score[code]=maximum;
	}
	int minimum=1e9;
	for(auto x:score)minimum=min(x.se,minimum);
	for(auto code:possible_codes){
		if(score[code]==minimum){
			guess_codes.insert(code);
		}
	}
	return guess_codes;
}

string GetCode(set<string> &knuth_codes,set<string> &possible_codes){
	set<string>guess_codes=MiniMax(knuth_codes,possible_codes);
	string code=GetGuessCodeFromList(knuth_codes,guess_codes);
	possible_codes.erase(code);
	return code;
}

vector<pair<string,int>>worst_case;
void mastermind(string mastermind_code){
	set<string>knuth_codes,possible_codes;
	//for(auto x:total_codes)cout<<x<<endl;
	//debug(total_codes.size());
	knuth_codes=total_codes;
	possible_codes=total_codes;
	int cnt=0;
	while(true){
		cnt++;
		string code = GetCode(knuth_codes,possible_codes);
		pair<int,int>feedback = GuessCode(mastermind_code,code);
		//debug(code);
		//cerr<<"feedback: "<<feedback.fi<<" "<<feedback.se<<endl;
		//debug(knuth_codes.size());
		//debug(possible_codes.size());
		if(feedback==MP(4,0)){
			cout<<"Code: "<<mastermind_code<<endl"Number of guesses used: "<<cnt<<endl;
			cout<<"-----"<<endl;
			total_guess+=cnt;
			mx=max(cnt,mx);
			if(cnt>=6)worst_case.pb(MP(code,cnt));
			break;
		}else{
			//for(auto x:knuth_codes)debug(x);
			PruneList(code,feedback,knuth_codes);
		}
	}
	
}

int main(){
	//ios::sync_with_stdio(0);
	//cin.tie(0);
	total_codes=GetTotalCodes();
	//auto tmp=GuessCode("1236","1231");debug(tmp.fi);debug(tmp.se);
	//mastermind("1236");
	for(auto mastermind_code:total_codes)mastermind(mastermind_code);
	average_guess=total_guess/1296;
	debug(average_guess);
	debug(mx);
	for(auto x: worst_case)cout<<x.fi<<" "<<x.se<<endl;
	return 0;
}

